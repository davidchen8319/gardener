// +build !ignore_autogenerated

/*
SPDX-FileCopyrightText: 2020 SAP SE or an SAP affiliate company and Gardener contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by defaulter-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RegisterDefaults adds defaulters functions to the given scheme.
// Public to allow building arbitrary schemes.
// All generated defaulters are covering - they call all nested defaulters.
func RegisterDefaults(scheme *runtime.Scheme) error {
	scheme.AddTypeDefaultingFunc(&GardenletConfiguration{}, func(obj interface{}) { SetObjectDefaults_GardenletConfiguration(obj.(*GardenletConfiguration)) })
	return nil
}

func SetObjectDefaults_GardenletConfiguration(in *GardenletConfiguration) {
	SetDefaults_GardenletConfiguration(in)
	if in.GardenClientConnection != nil {
		SetDefaults_GardenClientConnection(in.GardenClientConnection)
		SetDefaults_ClientConnectionConfiguration(&in.GardenClientConnection.ClientConnectionConfiguration)
	}
	if in.SeedClientConnection != nil {
		SetDefaults_SeedClientConnection(in.SeedClientConnection)
		SetDefaults_ClientConnectionConfiguration(&in.SeedClientConnection.ClientConnectionConfiguration)
	}
	if in.ShootClientConnection != nil {
		SetDefaults_ShootClientConnection(in.ShootClientConnection)
		SetDefaults_ClientConnectionConfiguration(&in.ShootClientConnection.ClientConnectionConfiguration)
	}
	if in.Controllers != nil {
		if in.Controllers.BackupBucket != nil {
			SetDefaults_BackupBucketControllerConfiguration(in.Controllers.BackupBucket)
		}
		if in.Controllers.BackupEntry != nil {
			SetDefaults_BackupEntryControllerConfiguration(in.Controllers.BackupEntry)
		}
		if in.Controllers.ControllerInstallation != nil {
			SetDefaults_ControllerInstallationControllerConfiguration(in.Controllers.ControllerInstallation)
		}
		if in.Controllers.ControllerInstallationCare != nil {
			SetDefaults_ControllerInstallationCareControllerConfiguration(in.Controllers.ControllerInstallationCare)
		}
		if in.Controllers.ControllerInstallationRequired != nil {
			SetDefaults_ControllerInstallationRequiredControllerConfiguration(in.Controllers.ControllerInstallationRequired)
		}
		if in.Controllers.Seed != nil {
			SetDefaults_SeedControllerConfiguration(in.Controllers.Seed)
		}
		if in.Controllers.Shoot != nil {
			SetDefaults_ShootControllerConfiguration(in.Controllers.Shoot)
		}
		if in.Controllers.ShootCare != nil {
			SetDefaults_ShootCareControllerConfiguration(in.Controllers.ShootCare)
		}
		if in.Controllers.ShootStateSync != nil {
			SetDefaults_ShootStateSyncControllerConfiguration(in.Controllers.ShootStateSync)
		}
		if in.Controllers.SeedAPIServerNetworkPolicy != nil {
			SetDefaults_SeedAPIServerNetworkPolicyControllerConfiguration(in.Controllers.SeedAPIServerNetworkPolicy)
		}
	}
	if in.LeaderElection != nil {
		SetDefaults_LeaderElectionConfiguration(in.LeaderElection)
	}
}
